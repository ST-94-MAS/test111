◆ApplicationLoadBalancer
SMP
Dev
Tokyo
Smp-Dev-ALB-Share-Ipublic
-
開発環境C面Ingress Public subnet用ALB
設定値

vpc			VPC ID取得（Smp-Dev-Vpc-Smp）
clientKeepAlive?			-
crossZoneEnabled?			-
deletionProtection?			-
denyAllIgwTraffic?			-
desyncMitigationMode?			-
dropInvalidHeaderFields?			-
http2Enabled?			-
idleTimeout?			-
internetFacing?			-
ipAddressType?			-
loadBalancerName?			Smp-Dev-ALB-Share-Ipublic
securityGroup?			SG ID取得()
vpcSubnets?			SubnetID取得（Smp-Dev-Subnet-Ipublic-c）
logAccessLogs			
	bucket		S3バット名を取得
	prefix		alb/Smp-Dev-ALB-Share-Ipublic
tags			
	Name		Smp-Dev-ALB-Share-Ipublic


◆ApplicationTargetGroup

SMP
Dev
Tokyo
Smp-Dev-TG-Crestf
-
開発環境C面用APDUコマンド処理結果転送
設定値

deregistrationDelay?		-
healthCheck?				
	enabled?			true
	healthyGrpcCodes?		-
	healthyHttpCodes?		200
	healthyThresholdCount?	-
	interval?			-
	path?			/qmoif-web/check
	port?			8080
	protocol?			-
	timeout?			-
	unhealthyThresholdCount?-
loadBalancingAlgorithmType?	TargetGroupLoadBalancingAlgorithmType.ROUND_ROBIN
port?				8080
protocol?				ApplicationProtocol.HTTP
protocolVersion?			ApplicationProtocolVersion.HTTP1
slowStart?				-
stickinessCookieDuration?	-
stickinessCookieName?		-
targetGroupName?			Smp-Dev-TG-Crestf
targetType?				TargetType.IP
targets?				-
vpc?				VPC ID取得（Smp-Dev-Vpc-Smp）
tags				
	Name			Smp-Dev-TG-Crestf

◆ApplicationListener
SMP
Dev
Tokyo
Smp-Dev-Lis-Ipublic
-
開発環境C面Ingress Public subnetアプリ処理受付用ALB
設定値

loadBalancer	ApplicationLoadBalancerから取得(Smp-Dev-ALB-AppPro-Ipublic)
certificates?	-
defaultAction?	
	targetGroups
	-
	-
	targetGroupStickinessConfig
	-
	-
defaultTargetGroups?	ApplicationTargetGroupから取得()
open?	true
port?	8080
protocol?	ApplicationProtocol.HTTP
sslPolicy?	-
tags	
	NameSmp-Dev-Lis-Ipublic


◆ApplicationListenerCertificate

SMP
Dev
Tokyo
Smp-Dev-LicCer-Ipublic
-
開発環境C面Ingress Public subnet用ALB
設定値

listener	ApplicationListenerから取得()
certificates?	-
tags	
	NameSmp-Dev-LicCer-Ipublic



◆ApplicationListenerRule

SMP
Dev
Tokyo
Smp-Dev-LisRule-Ipublic
-
開発環境C面Ingress Public subnet用ALB
設定値

ApplicationListenerから取得()

listener			10
ルール1			-
	priority		elbv2.ListenerCondition.pathPatterns(['/internal-rev/*'])
	action?		ApplicationTargetGroupから取得()
	conditions?		
	targetGroups?	
tags	
	Name Smp-Dev-LisRule-Ipublic

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
import * as cdk from '@aws-cdk/core';
import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';
import * as ec2 from '@aws-cdk/aws-ec2';
import * as s3 from '@aws-cdk/aws-s3';

class MyStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // VPCを取得
    const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {
      vpcName: 'Smp-Dev-Vpc-Smp'
    });

    // Security Groupを取得
    const securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'security-group-id');

    // Subnetを取得
    const vpcSubnets = {
      subnets: [ec2.Subnet.fromSubnetId(this, 'Subnet', 'subnet-id')],
    };

    // ALBの作成
    const alb = new elbv2.ApplicationLoadBalancer(this, 'ALB', {
      vpc,
      internetFacing: true,
      loadBalancerName: 'Smp-Dev-ALB-Share-Ipublic',
      vpcSubnets,
      securityGroup,
    });

    // ALBのアクセスログ
    const logBucket = s3.Bucket.fromBucketName(this, 'LogBucket', 'bucket-name');
    alb.logAccessLogs(logBucket, 'alb/Smp-Dev-ALB-Share-Ipublic');

    // Target Groupの作成
    const targetGroup = new elbv2.ApplicationTargetGroup(this, 'TargetGroup', {
      vpc,
      port: 8080,
      protocol: elbv2.ApplicationProtocol.HTTP,
      targetGroupName: 'Smp-Dev-TG-Crestf',
      targetType: elbv2.TargetType.IP,
      healthCheck: {
        path: '/qmoif-web/check',
        protocol: elbv2.Protocol.HTTP,
        healthyHttpCodes: '200',
      },
    });

    // Listenerの作成
    const listener = alb.addListener('Listener', {
      port: 8080,
      protocol: elbv2.ApplicationProtocol.HTTP,
      defaultTargetGroups: [targetGroup],
    });

    // Listener Ruleの作成
    listener.addRules('ListenerRule', {
      conditions: [elbv2.ListenerCondition.pathPatterns(['/internal-rev/*'])],
      priority: 10,
      actions: [elbv2.ListenerAction.forward([targetGroup])],
    });
  }
}

const app = new cdk.App();
new MyStack(app, 'MyStack');
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
