RDS(SQL Server)にSSMSで接続する。
アクセスログを残したい(アクセスログは管理者やサポートや作業者のアカウントログを取得)
要望としては誰がアクセスしたかが明確にしたい。



下記のような、本番環境のユーザーDBに直接アクセスして特定のデータを閲覧、変更する場合の手順となります。
HIPRJ-1303 顧客コード［0381］鶴岡仁成堂薬局高砂店　hoppe連動をアプリ側で解除した患者のhoppe推奨のQRコードの用紙が印刷できない
１．	接続する薬局からサーバーデータ使用承諾書を受領する。
２．	SQL Server Management Studio (以下、SSMS)で薬局のDBに接続する。
①	接続したい薬局に端末登録（※1）する。
②	「Hi-Story Cloud Connection」を起動して、接続したい薬局を選択した状態にする。
③	SFTP「/Hi-Story/tools/HistoryCloudSqlConectionDecoder.zip」にある接続情報を復号して表示するツール「HistoryCloudSqlConectionDecoder.exe」を実行する。※通常、接続情報は暗号化された状態で運用されているので、復号した接続情報は保存しないように。
④	表示された接続情報でSSMSからDBに接続する。
	サーバー名：復号ツールで表示されている「DataSource」の値（通常は127.0.0.1,50000）
	認証：SQL Server 認証
	ログイン：復号ツールで表示されている「UserID」の値（薬局IDと同じ）
	パスワード：復号ツールで表示されている「Password」の値
３．	SSMSの「オブジェクトエクスプローラー」から接続したい薬局のIDと「同じ名称のDB」を探して選択する。※SSMSのログインで指定した薬局ID以外のDBを選択しても権限がないので操作できません。必要に応じて「PAD薬局設定」に記録されている薬局名などを確認して、意図せず別の薬局のDBを操作しようとしていないか確認してください。
４．	DBのデータを閲覧、変更する。以下は変更の推奨手順。
①	薬局のDBをバックアップ（※1）する。
②	変更するテーブルの全レコードをエクスポートして控えておく。
③	変更するテーブルのレコードを変更する。※テーブルを「すべての行の編集」で開いて直接編集すると、誤操作で他のレコードを変えてしまう可能性があるので、クエリを作成して変更することを推奨する。
④	変更した後の全レコードをエクスポートする。
⑤	手順②と④のデータを比較して意図しない変更をしていないか確認する。
５．	「Hi-Story Cloud Connection」を終了する。
６．	端末登録を削除（※1）する。
７．	「%LOCALAPPDATA%\Hibridge」フォルダを削除する。

※1本番環境での操作権限が必要なので、権限がある人間（開発課）に依頼して実施してもらうこと。


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
各ログ取得方法について「利用方法」「メリット」「デメリット」「設定方法」の順にまとめました。

1. SQL Server Audit
利用方法: 管理者が特定のアクション（ログイン、データ操作など）を監査するために使用。監査ログはファイルやWindowsログに保存可能。
メリット: 細かい監査設定が可能で、すべてのユーザーの操作や特定ユーザーの操作を追跡できる。監査結果を保存して後から確認できる。
デメリット: 設定がやや複雑で、監査の範囲を広げすぎるとパフォーマンスに影響する可能性がある。
設定方法:
SSMSを起動して、データベースに接続。
「セキュリティ」→「監査」→「新しい監査の作成」で監査を設定。
「データベース監査仕様」または「サーバー監査仕様」を作成し、監査対象のアクション（例：ログイン、SELECT操作など）を指定。
監査ログの保存先（ファイル、セキュリティログ、アプリケーションログ）を設定し、監査を有効化。
監査ログの確認: SSMSの「監査ログビューア」で確認。
2. SQL Server Profiler
利用方法: デバッグやトラブルシューティングに使用。短期間のリアルタイム監視向け。
メリット: リアルタイムでの監視が容易。フィルタリング設定により、特定のユーザーやイベントのみをトレース可能。
デメリット: 長期間のトレースではパフォーマンスに影響を与える。過去のログは取得できない。
設定方法:
SSMSを起動し、「ツール」→「SQL Server Profiler」を選択。
接続したいSQL Serverインスタンスを選択し、新しいトレースを作成。
「イベントの選択」タブで監視したいイベントを指定（例：SQL
、RPC
）。
トレースフィルタを設定し、特定のユーザーやイベントに絞り込む。
トレースを実行してリアルタイムでログを収集。必要に応じてログをファイルに保存。
3. Extended Events
利用方法: パフォーマンス監視や特定のイベントを追跡するために使用。カスタマイズ可能で、詳細なログを収集できる。
メリット: 軽量で柔軟なイベント監視が可能。特定のユーザーやイベントを効率的に監視でき、パフォーマンスへの影響が少ない。
デメリット: 設定がやや複雑で、詳細な知識が必要。リアルタイムではなく設定後のログのみ取得可能。
設定方法:
SSMSを起動し、「管理」→「拡張イベント」→「セッションの新規作成」を選択。
セッション名を入力し、テンプレート（例：「デフォルト」）を選択。
「イベントの選択」タブで監視対象のイベント（例：sqlserver.sql_statement_completed）を追加。
「フィルター」タブで、特定のユーザーやイベントに絞り込む。
ログの保存先を設定（ファイル、イベントファイルなど）し、セッションを開始。保存したログを確認可能。
4. データベーストリガー
利用方法: 特定のデータ変更操作を監視するために使用。トリガーでデータ変更時に自動的にログを記録する。
メリット: 特定のテーブル操作を即座にログに記録可能。操作の詳細をカスタムテーブルに保存できる。
デメリット: パフォーマンスに影響を与える可能性があり、すべての操作を追跡するには不向き。
設定方法:
SSMSを起動し、ログを保存するためのテーブルを作成（例：AuditLogテーブル）。
対象テーブルに対して、INSERT、UPDATE、DELETEトリガーを作成。
トリガー内で、SUSER_SNAME()関数を使用して操作ユーザーや変更内容を取得し、AuditLogテーブルに記録。
トリガーを有効化し、データ変更時に自動でログが記録されるように設定。
5. SQL Server Error Logs
利用方法: SQL Serverのエラーや接続に関するログを確認するために使用。システム全体の状況把握に有効。
メリット: 標準で自動的にログが記録されるため、設定不要。サーバーレベルのエラーや接続の履歴が確認できる。
デメリット: ユーザーごとの操作やクエリログは記録されない。主にエラーや警告にフォーカスしている。
設定方法:
SSMSを起動し、「管理」→「SQL Serverエージェント」→「エラーログ」を選択。
エラーログの表示をクリックし、過去のエラーログファイルを参照。
必要に応じてログをエクスポートし、保存可能。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
