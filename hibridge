ShimaPublicSubnet1
CREATE_FAILED
-
Resource handler returned message: "Value (ap-northeast-3a) for parameter availabilityZone is invalid. Subnets can currently only be created in the following availability zones: ap-northeast-1a, ap-northeast-1c, ap-northeast-1d. (Service: Ec2, Status Code: 400, Request ID: 767eb971-6a57-4013-b6f6-807575d411a9)" (RequestToken: 3d90bac3-d125-b215-c129-2c0fa144bc93, HandlerErrorCode: InvalidRequest)

■目的
SQL Serverのアクセスログと各テーブルのログ(CREATE,INSERT,UPDATE,DELETE)の取得。

■前提
ログは２つあり、取得方法がそれぞれ異なる。
サーバーレベルの監査設定：SQL Serverインスタンスに対するログインイベントなどを監査。
データベースレベルの監査設定：特定のデータベース内での操作（クエリ、データの変更、テーブル作成など）を監査。

サーバーレベルのログとデータベースレベルのログを統合することが難しい。
そのため別々の方法で取得している。

■取得方法
・サーバーレベルのログの取得方法
特定のファイルパス（例：D:\rdsdbdata\SQLAudit）に保存されていき、設定されたファイルサイズになると保存場所にファイル(.sqlauditファイル)として吐き出される。
オンプレの場合はファイルが蓄積されていくため、容量を圧迫していく。
クラウドではS3にたまっていく。
sa権限を持ったSQL Serverにログインして


・データベースのログの取得方法
トランザクションログは、データベース内のすべてのトランザクション（INSERT、UPDATE、DELETE、およびトランザクション自体の開始やコミットなど）を記録します。このログは、データベースの復旧やリカバリに使用されます。
トランザクションログファイル (.ldf) は、データファイル (.mdf) と同じディレクトリ内にAWSが管理するストレージに保存されています。
AWS RDSのSQL Serverインスタンスでは、これらのファイルに直接アクセスすることはできません。
トランザクションログの内容をCloudWatchで監視することはできません。

つまり現状ではトランザクションログを確認することができない。
そのため監視するためのDB内に監視するテーブルを作成し、各テーブルにトリガーを設定し、CREATEコマンドやINSERTコマンドが実行されたら、監視テーブルにログをまとめる。



■実施手順
1.SQL に管理者でログイン
2.サーバー監査ログの作成
3.サーバー監査仕様の作成
4.SQLユーザー登録(20人分)                          ※本来は不要
5.DBの作成(20個)                                   ※本来は不要
6.すべてのDBにEmployeesテーブルを作成する          ※本来は不要
7.すべてのDBにEmployees_Auditテーブルを作成する
8.複数のDBに監査設定を付与
9.INSERT、DELETE、UPDATEトリガーを作成
10.user5でSQLログイン                              ※本来は不要
11.user5でSQLログイン                              ※本来は不要
12.user5でINSERT、DELETE、UPDATEコマンドを実施。   ※本来は不要

■実際のスクリプト

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

1.SQL に管理者でログイン

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
2.サーバー監査ログの作成
-- masterデータベースに接続
USE [master];
GO

-- サーバー監査の作成（ファイルパスはRDSで自動的に管理されます）
CREATE SERVER AUDIT [ServerAudit]
TO FILE 
(	FILEPATH = N'D:\rdsdbdata\SQLAudit',  -- このパスはRDSのオプショングループ設定に従います
	MAXSIZE = 10 MB,
	RESERVE_DISK_SPACE = OFF
) WITH (ON_FAILURE = CONTINUE);
GO

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
3.サーバー監査仕様の作成
-- サーバー監査仕様の作成
CREATE SERVER AUDIT SPECIFICATION [ServerAuditSpec]
FOR SERVER AUDIT [ServerAudit]
    ADD (LOGIN_CHANGE_PASSWORD_GROUP),           -- パスワード変更の監視
    ADD (FAILED_LOGIN_GROUP),                    -- 失敗したログインの監視
    ADD (SUCCESSFUL_LOGIN_GROUP),                -- 成功したログインの監視
    ADD (DATABASE_OBJECT_ACCESS_GROUP),          -- データベースオブジェクトへのアクセスの監視
    ADD (DATABASE_OBJECT_CHANGE_GROUP),          -- データベースオブジェクトの変更（INSERT, UPDATE, DELETE）の監視
    ADD (DATABASE_PRINCIPAL_CHANGE_GROUP),       -- データベースオブジェクトの作成（CREATE）の監視
    ADD (SCHEMA_OBJECT_CHANGE_GROUP),            -- スキーマオブジェクトの変更（DROPなど）の監視
    ADD (SERVER_STATE_CHANGE_GROUP)             -- サーバーパフォーマンス状態や変更の監視
WITH (STATE = ON);
GO

-- 監査開始 (監査の有効化)
ALTER SERVER AUDIT [ServerAudit]
WITH (STATE = ON);
GO


▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
4.SQLユーザー登録(20人分)
DECLARE @i INT = 1;
WHILE @i <= 20
BEGIN
    DECLARE @dbName NVARCHAR(50) = 'TestDB' + CAST(@i AS NVARCHAR(2));
    DECLARE @sql NVARCHAR(MAX) = 'CREATE DATABASE ' + @dbName;
    EXEC sp_executesql @sql;
    SET @i = @i + 1;
END
GO

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

5.DBの作成(20個) 

DECLARE @i INT = 1;
WHILE @i <= 20
BEGIN
    -- SQL Serverログインの作成
    DECLARE @loginName NVARCHAR(50) = 'user' + CAST(@i AS NVARCHAR(2));
    DECLARE @password NVARCHAR(50) = 'Password123!';
    DECLARE @sql NVARCHAR(MAX) = 'CREATE LOGIN [' + @loginName + '] WITH PASSWORD = ''' + @password + ''';';
    EXEC sp_executesql @sql;
    
    -- データベース内のユーザー名は "userXXDB" にする
    DECLARE @dbUserName NVARCHAR(50) = @loginName + 'DB';
    DECLARE @dbName NVARCHAR(50) = 'TestDB' + CAST(@i AS NVARCHAR(2));
    
    -- 各データベースにユーザーを作成し、ログインにマッピング
    SET @sql = 'USE ' + @dbName + '; CREATE USER [' + @dbUserName + '] FOR LOGIN [' + @loginName + '];';
    EXEC sp_executesql @sql;
    
    SET @i = @i + 1;
END
GO

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
6.すべてのDBにEmployeesテーブルを作成する
DECLARE @dbName NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

-- データベースカーソルを使用して、すべてのユーザーデータベースに対して操作を実行
DECLARE db_cursor CURSOR FOR
SELECT name 
FROM sys.databases
WHERE name NOT IN ('master', 'model', 'msdb', 'tempdb', 'rdsadmin');  -- システムデータベースを除外

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- 各データベースに対してEmployeesテーブルを作成
    SET @sql = '
    USE [' + @dbName + '];
    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = ''Employees'')
    BEGIN
        CREATE TABLE [dbo].[Employees] (
            EmployeeID INT PRIMARY KEY,
            FirstName NVARCHAR(50),
            LastName NVARCHAR(50),
            HireDate DATE,
            Salary DECIMAL(10, 2)
        );
    END;
    ';
    
    -- 動的SQLを実行
    EXEC sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @dbName;
END;

CLOSE db_cursor;
DEALLOCATE db_cursor;
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
7.すべてのDBにEmployees_Auditテーブルを作成する
DECLARE @dbName NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

-- データベースカーソルを使用して、すべてのユーザーデータベースに対して操作を実行
DECLARE db_cursor CURSOR FOR
SELECT name 
FROM sys.databases
WHERE name NOT IN ('master', 'model', 'msdb', 'tempdb', 'rdsadmin');  -- システムデータベースを除外

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- 各データベースに対してEmployees_Auditテーブルを作成
    SET @sql = '
    USE [' + @dbName + '];
    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = ''Employees_Audit'')
    BEGIN
        CREATE TABLE [dbo].[Employees_Audit] (
            AuditID INT IDENTITY(1,1) PRIMARY KEY,  -- 自動増分のプライマリキー
            AuditDate DATETIME DEFAULT GETDATE(),  -- 自動的に現在の日付を挿入
            UserName NVARCHAR(128) DEFAULT SUSER_NAME(),  -- 操作したユーザー名を自動挿入
            UserID UNIQUEIDENTIFIER DEFAULT SUSER_SID(),  -- 操作したユーザーIDを自動挿入
            TableName NVARCHAR(128),  -- 操作したテーブル名
            AuditAction NVARCHAR(50),  -- 操作の種類
            EmployeeID INT  -- 操作対象の従業員ID
        );
    END;
    ';
    
    -- 動的SQLを実行
    EXEC sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @dbName;
END;

CLOSE db_cursor;
DEALLOCATE db_cursor;



▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
--8.複数のDBに監査設定を付与
--sys.databasesシステムビューを使用して、現在のSQL Serverインスタンス内のすべてのデータベースを取得します。システムデータベース（master、model、msdb、tempdb）は除外します。

DECLARE @dbName NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

-- データベースカーソルを使用して、すべてのユーザーデータベースに対して操作を実行
DECLARE db_cursor CURSOR FOR
SELECT name 
FROM sys.databases
WHERE name NOT IN ('master', 'model', 'msdb', 'tempdb');  -- システムデータベースを除外

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- 各データベースに対して監査設定を動的に実行
    SET @sql = '
    USE [' + @dbName + '];
    IF NOT EXISTS (SELECT * FROM sys.database_audit_specifications WHERE name = ''DatabaseAuditSpec'')
    BEGIN
        CREATE DATABASE AUDIT SPECIFICATION [DatabaseAuditSpec]
        FOR SERVER AUDIT [ServerAudit]
            ADD (DATABASE_CHANGE_GROUP),                
            ADD (DATABASE_OBJECT_ACCESS_GROUP),         
            ADD (DATABASE_OBJECT_CHANGE_GROUP),         
            ADD (DATABASE_PRINCIPAL_CHANGE_GROUP),      
            ADD (FAILED_DATABASE_AUTHENTICATION_GROUP), 
            ADD (BACKUP_RESTORE_GROUP)                  -- バックアップやリストア操作の監視
        WITH (STATE = ON);
    END
    ';

    -- 動的SQLを実行
    EXEC sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @dbName;
END;

CLOSE db_cursor;
DEALLOCATE db_cursor;


▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

9.INSERT、DELETE、UPDATEトリガーを作成

-- rdsadmin データベースを除いてすべてのユーザーデータベースにトリガーを作成
DECLARE @dbName NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

-- システムデータベースと rdsadmin を除外してループ
DECLARE db_cursor CURSOR FOR
SELECT name 
FROM sys.databases 
WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb', 'rdsadmin');

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @dbName

WHILE @@FETCH_STATUS = 0
BEGIN
    -- INSERT トリガー作成
    SET @sql = '
    USE [' + @dbName + '];
    EXEC(''CREATE TRIGGER trg_AfterInsert_Employees
    ON dbo.Employees
    AFTER INSERT
    AS
    BEGIN
        INSERT INTO dbo.Employees_Audit (TableName, AuditAction, EmployeeID, AuditDate)
        SELECT ''''Employees'''', ''''INSERT'''', EmployeeID, GETDATE()
        FROM inserted;
    END;'');
    ';

    EXEC sp_executesql @sql;

    -- DELETE トリガー作成
    SET @sql = '
    USE [' + @dbName + '];
    EXEC(''CREATE TRIGGER trg_AfterDelete_Employees
    ON dbo.Employees
    AFTER DELETE
    AS
    BEGIN
        INSERT INTO dbo.Employees_Audit (TableName, AuditAction, EmployeeID, AuditDate)
        SELECT ''''Employees'''', ''''DELETE'''', EmployeeID, GETDATE()
        FROM deleted;
    END;'');
    ';

    EXEC sp_executesql @sql;

    -- UPDATE トリガー作成
    SET @sql = '
    USE [' + @dbName + '];
    EXEC(''CREATE TRIGGER trg_AfterUpdate_Employees
    ON dbo.Employees
    AFTER UPDATE
    AS
    BEGIN
        INSERT INTO dbo.Employees_Audit (TableName, AuditAction, EmployeeID, AuditDate)
        SELECT ''''Employees'''', ''''UPDATE'''', EmployeeID, GETDATE()
        FROM inserted;
    END;'');
    ';

    EXEC sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @dbName
END

CLOSE db_cursor;
DEALLOCATE db_cursor;


▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

10.user5でSQLログイン
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
11.SQLユーザーとDBユーザーを紐づけ(user5とuserDB5) 
USE [TestDB5];
ALTER ROLE db_owner ADD MEMBER [user5DB];


▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

12.user5でINSERT、DELETE、UPDATEコマンドを実施。

-- TestDB5 データベースを使用する
USE TestDB5;
GO


-- TestDB5 にテーブルを作成
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);

-- INSERT文：Employeesテーブルに5件のデータを挿入
INSERT INTO Employees (EmployeeID, FirstName, LastName, HireDate, Salary)
VALUES 
(1, 'John', 'Doe', '2020-01-15', 55000.00),
(2, 'Jane', 'Smith', '2019-03-23', 60000.00),
(3, 'Michael', 'Johnson', '2021-07-10', 52000.00),
(4, 'Emily', 'Davis', '2018-09-15', 67000.00),
(5, 'Daniel', 'Brown', '2017-05-25', 72000.00);
GO

-- UPDATE文：Salaryを更新
UPDATE Employees
SET Salary = Salary + 5000  -- すべての従業員の給与を5000増加
WHERE HireDate < '2020-01-01';  -- 2020年以前に雇用された従業員が対象
GO

-- DELETE文：特定の従業員を削除
DELETE FROM Employees
WHERE EmployeeID = 5;  -- EmployeeIDが5の従業員を削除
GO


▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
改善

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
■INSERT、DELETE、UPDATEトリガーを作成がDBごとにしか手で実行するしかない

■新規で作成したDBやテーブルにも同様のことをしないいけない。


■Lambda関数を使用して自動化
 AWS Lambda関数を作成し、定期的にRDSから監視用テーブルのデータを取得し、それをCSV形式でS3にアップロードするように設定。

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
確認
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
■トリガーの作成が正しく行われたか
SELECT name, type_desc 
FROM sys.triggers 
WHERE parent_id = OBJECT_ID('dbo.Employees');


■トリガーの定義を確認する
EXEC sp_helptext 'trg_AfterInsert_Employees';
EXEC sp_helptext 'trg_AfterDelete_Employees';
EXEC sp_helptext 'trg_AfterUpdate_Employees';



SELECT * FROM Employees_Audit;


■INSERT操作のみを確認する場合
SELECT *
FROM dbo.Employees_Audit
WHERE AuditAction = 'DELETE';

■DELETE操作のみを確認する場合

SELECT *
FROM dbo.Employees_Audit
WHERE AuditAction = 'DELETE';

■UPDATE操作のみを確認する場合

SELECT *
FROM dbo.Employees_Audit
WHERE AuditAction = 'UPDATE';

■監査ログの確認

SELECT * 
FROM msdb.dbo.rds_fn_get_audit_file('D:\rdsdbdata\SQLAudit\*.sqlaudit', default, default);
