以下のアドレスより「PumapWebService-Satelite-Template.zip」をダウンロードします。
https:// dsy1xm230537a.cloudfront.net/latest/PumapWebService-Satelite-Template.zip

PumapWebServiceのサテライトサイトに関連するS3バケットの名前は以下の通りです：

pumap-content: コンテンツデータを格納するためのバケット。
pumap-enduser: エンドユーザーデータを格納するためのバケット。
pumap-usage-log: ログデータを保存するためのバケット。
pumap-content-zip: CloudFrontのOAIを介してアクセスするためのバケット。

サテライトサイトをAWS上に作成したい。
使用するサービスはAPI Gateway、lambda、firehose、IAM、OAI、cloudfront
作成するにあたって懸念点や実施すべきこと、そのほかに必要なことを記載して。

実施したい内容は下記

・ユーザーがAPIキーを指定して今回作成するサテライトサイトのAPI Gateway(public)にアクセスする
API Gatewayからlamdaを使用してFirehose(間にroleとpolicy)を使用して他の会社が管理するS3にアクセス(クロスアカウントアクセス)をしてこちらの情報を渡したり、別lambdaが受け取ったりする。
とってきたデータ(JSONファイルやzipファイル)をOAIからcloudfrontでダウンロードしてデータを渡すサービスがある。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

業務として
Hi_Bridge管理するAWS上にcloud版としてHi storyが乗っているはず。
Hi_Bridge管理するAWS上に配信(サテライト)サイトの作成を行う。
通常は管理サイトの作成は行わないが、Hi_Bridge管理するAWS上にサンプルでは作成する必要あり。

●サテライトサイトを作成するにあたり必要なもの

●今後決定すべきこと
管理サイトのS3のエンドポイント(管理場所)



 envrc.sandboxの追加
history_wsのルートディレクトリに「envrc.sandbox」を追加し、下記のように書き換えてください。
HI_CLOUD_S3_SUFFIXは一意なUUIDを作成してください。
HI_CLOUD_MAIN_DOMAIN_ZONE_IDは、Route53のsandbox.historyws.netのホストゾーンIDを入れてください。


•	envrc.sandbox
export AWS_PROFILE=sandbox

export HI_CLOUD_ACTIVE_AVAILABILITY_ZONE="ap-northeast-1a"
export HI_CLOUD_MAIN_DOMAIN='sandbox.historyws.net'
export HI_CLOUD_MAIN_DOMAIN_ZONE_ID=Z01164761R7YR7KZSQJ9G

export HI_CLOUD_AUTH_SERVER_COUNT=1
export HI_CLOUD_S3_SUFFIX=7fd76ad8-46a0-4b3a-b32d-051e604e6df

export HI_CLOUD_USER_RDS=$(cat << EOF
{
	"sandbox-0001" : {
		snapshot_identifier = ""
		engine = "ex"
		instance_class = "db.t3.small"
		multi_az = "false"
		allocated_storage = 150
		apply_immediately = true
	},
}
EOF
)

export HI_CLOUD_AUTH_SERVER=$(cat << EOF
{
	count = 1
	instance_type = "t2.nano"
}
EOF
)

export HI_CLOUD_APP_SERVER=$(cat << EOF
{
	count = 1
	instance_type = "t2.nano"
}
EOF
)

export HI_CLOUD_REGION=ap-northeast-1
export HI_CLOUD_VPC_NAME=history
export HI_CLOUD_ENV=$AWS_PROFILE
export HI_CLOUD_BUILD_DIR=$(readlink -f ./src/bin)
 Makefileの編集
Makefileにsandboxに変更できる行を追加してください。
.PHONY: switch-prod-env
switch-prod-env:
	@echo "本番環境に切り替えます。"
	-rm .envrc
	ln -s envrc.prod .envrc
	direnv allow

.PHONY: switch-sandbox-env
switch-sandbox-env:
	@echo "XXX環境に切り替えます。"
	-rm .envrc
	ln -s envrc.sandbox .envrc
	direnv allow

・・・
 makeの実行
makeの各コマンドを下記の順で実行してください。
make terraform-init
make key
make master-data
make ami-auth-server
make ami-app-server
make ami-manage-server
make ami-migration-windows
make vpc
これで新環境の作成ができあがります。
 管理DBの初期化
管理サーバーに入って、
$HOME/bin/init-script/init-manage-rds.sh
$HOME/bin/update/2021.1/run.sh
$HOME/bin/update/2022.2/run.sh
を実行してください。
 クラウドのセットアップ
「aws_アップデーターアップロード手順.docx」を参考に、共通DBとアップデーターを配置します。添付文書PDFはS3バケット「s3://users-common-xxxxxxx/medicine_pdf/」に配置します。アップデーター作成時に、全ての添付文書PDFを作成して社内に保管しているはずなので、左記の場所にアップロードしてください。
Hi-Story C管理サーバーで下記のコマンドを実行します。
	共通DBのセットアップ
/home/ec2-user/bin/init-scripts/init-user-rds.sh -v <バージョン番号>
	アップデーターの配信
hi-add-new-client-version --date <配信日> --version <バージョン番号>
 クライアントのセットアップ
次のリンクを参考にMSBuildをインストールします。https://learn.microsoft.com/ja-jp/visualstudio/msbuild/walkthrough-using-msbuild?view=vs-2019
MSBuildのパスを環境変数に登録するか、「developer command prompt」を起動してインストールしたMSBuildが起動する状態にしておいてください。
ソースコードのリポジトリ「git@gitlab.com:hi-bridge/history-cloudclient.git」をチェックアウトして、クライアントのセットアップを作成します。
既存の類似ファイルを参考に次のファイルを追加し、各ドメインの情報を記載してください。既存のファイルをコピーして作成してもいいですが、「ファイルに記載されているドメインの情報が作成した環境のドメインの情報になっていることしっかり確認する」ようにしてください。間違えると運用中の別のドメインに接続されます。
	build_{環境名}.bat
	ドメインを記載する。
	History_cloud_DataB_Upload_{環境名}.bat
	作成した環境のエンドポイントを記載する
	known_hosts_{環境名}
	ドメインと認証サーバーの公開鍵を記載する。公開鍵の文字列は「AWS System Manager」-「パラメーターストア」-「/master/ca/public_key」のエントリに保存されています。
下記のファイルを更新します。
	build_all.bat
	各ドメイン用のバッチファイルの名称を追記します。
「build.ps1」を実行します。※全てのドメインがビルドされるので「build_{環境名}.bat」のみでも可。
「bin\{環境名}」にクライアントのセットアップが作成されます。
薬局スペースを作成してからDBを移行し、クライアントから端末登録を実施してHistoryCが利用できることを確認し完了です。
 運用の開始
作成したクライアントのセットアップを使い、薬局スペースを作成してからDBを移行し、端末登録を実施してください。
HistoryCが使えることを確認できれば完了です



API Gateway のカスタムドメイン名の設定
テンプレートからのスタック作成によって、薬歴システムから呼び出される API も作成されます。
テンプレート「PumapWebService_Build_Satelite_*_*_*_WithApiCustomDomain.yaml」にてスタックを作成した場
合には、作成時に指定したドメイン名（カスタムドメイン名）にて API も作成されますので、設定作業は不要です。
また、CloudFormation のスタック「PumapService」の出力タブの「APIBaseEndpoint」に、指定したドメイン名が反映
された基本ドメイン名が表示されます。
テンプレート「PumapWebService_Build_Satelite_*_*_*_WithApiCustomDomain.yaml」を使用せずにスタックを作
成した場合で、「カスタムドメイン名」を設定したい場合には、
コンソールから API Gateway のカスタムドメイン名を設定する必要があります。
・API Gateway – カスタムドメイン名にて作成
・TLS バージョンは「TLS 1.2」
・API マッピングは「PumapService」ステージ「Prod」を指定


CloudFront 代替ドメイン名の設定
テンプレートからのスタック作成によって、管理サイトのバケットに配置されているコンテンツファイルと薬剤判定リストファイ
ル CloudFront ディストリビューションが作成されます。薬歴システムは、このディストリビューションを利用してファイルをダ
ウンロードします。
API Gateway のカスタムドメイン名の設定と同様、CloudFormation の代替ドメイン名を設定する場合には、
コンソールから CloudFormation の代替ドメイン名を設定する必要があります。
・CloudFront – ディストリビューション（オリジン 「pumap-content-zip.s3.amazonaws.com」）
└ 設定 – 代替ドメイン名 ： ドメイン名を指定
 └ 設定 – カスタム SSL 証明書 ： ACM(バージニア北部)に登録されている SSL 証明書を選択
　└ 　設定 – セキュリティポリシー ： 「TLSv1.2_2019」を選択
