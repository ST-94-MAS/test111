------------------------------------------------
■要件
アクセスログを残したい(アクセスログは管理者やサポートや作業者のアカウントログを取得)
誰がアクセスしたかが明確にしたい。

■アクセス方法
RDS(SQL Server)にSSMSで接続する。

■結論(仮)
SQL Server監査機能 + CloudWatch Logs 
SQL Server監査機能を使ってデータベース内の詳細な操作（ログイン、クエリ実行、テーブル変更など）を記録し、その監査ログをCloudWatch Logsに送信して管理する

【メリット】
  ・ストレージの節約: RDSインスタンスのディスクを圧迫することなく、監査ログを長期間保存できるため、RDSのパフォーマンスに影響を与えません。
  ・スケーラビリティ: CloudWatch Logsは非常にスケーラブルであり、大量のログを効率的に管理・保存できます。さらに、ログの検索やフィルタリングが簡単にできるため、必要な情報に迅速にアクセスできます。
  ・アラート機能: CloudWatchのアラート機能を活用することで、特定のアクション（例えば、不正アクセスの試みや失敗したログイン）に対してリアルタイムで通知を受け取ることが可能です。
【デメリット】
  ・コスト: CloudWatch Logsは保存量と保存期間に基づいて課金されます。大量の監査ログを長期間保存する場合は、コストが増加する可能性があります。
  ・設定の手間: SQL Server監査機能とCloudWatch Logsの統合には初期設定の手間がかかります。監査項目の選定も慎重に行わないと、不要なログが大量に生成されるリスクがあります。

  ※コストの話
  RDS汎用SSD（gp3）ストレージの場合:
  1GBあたり月額約0.115 USD。
  1年間のコストは、0.115 USD x 12ヶ月 = 1.38 USD/GB。
  ログの保存コスト: 1GBあたり月額0.03 USD。

  CloudWatch Logsのコストは、データの取り込みコストとログ保存コストを計算する必要があります。
  データの取り込みコスト: 1GBあたり0.50 USD（これは1回限りのコスト）。
  ログの保存コスト: 1GBあたり月額0.03 USD。
------------------------------------------------
■候補案

● 方法1: SQL Server監査機能の利用
【説明】:
  SQL Serverには監査機能があり、ログインイベントや特定のクエリ実行などのアクティビティを記録できます。
  この機能を使用して、ユーザーの接続やデータベース操作の詳細なログを取得可能です。

【メリット】:
  ・SQL Serverに組み込み済みの機能で、SSMSから直接設定可能。
  ・ログイン、クエリ実行などの詳細な操作ログを取得可能。
  ・ログの保存先をRDSのデータディスクやCloudWatch Logsに設定可能。
【デメリット】:
  ・監査ログのサイズが大きくなりやすく、保存にコストがかかる場合がある。
  ・初期設定が必要で、監査範囲を適切に設定しないと過剰なログが記録されるリスクがある。
  ・各RDSインスタンスごとに監査設定が必要で、複数のインスタンスがある場合には手間がかかる。


● 方法2: AWS CloudTrailの利用
【説明】:
  AWS CloudTrailは、AWSアカウント内のAPIアクティビティを記録するサービスです。
  RDSに対するAPI呼び出し（例: インスタンスの作成、削除、開始、停止など）の履歴を取得できます。
  ただし、SQL Server内での詳細なデータベース操作は記録されません。

【メリット】:
  ・RDSインスタンスに対するAWS API呼び出し（作成、削除など）の履歴を自動的に記録できる。
  ・AWS全体での操作を追跡でき、セキュリティやコンプライアンス要件に対応可能。
  ・追加設定なしで全AWSリソースのアクティビティログを集中管理可能。
【デメリット】:
  ・RDS SQL Server内での具体的なクエリ実行やログインイベントは記録されない。
  ・RDSの運用管理に関するアクティビティのみが対象となるため、データベース内部の操作履歴を取得したい場合には不十分。

● 方法3: SQL Serverログイントリガーの利用
【説明】:
  SQL Serverにはログイントリガーを設定する機能があり、ユーザーがデータベースにログインした際に特定の処理を自動的に実行できます。
  ログインイベントを検出して、ユーザーやタイムスタンプの記録をカスタムで実装可能です。

【メリット】:
  ・ユーザーがログインした瞬間にカスタム処理を実行でき、ログインの詳細な記録を残せる。
  ・特定の条件に応じたアクションを自動的に実行可能（例: 不正なアクセスの遮断、通知の送信など）。
  ・SQL Serverの標準機能を使用するため、追加のコストがかからない。
【デメリット】:
  ・ログイントリガーの作成にはSQLの知識が必要で、設定が複雑になる場合がある。
  ・トリガーの設定によっては、データベースのパフォーマンスに影響を与える可能性がある。
  ・クエリ実行やデータ操作のログは取得できず、ログインイベントに限定される。

● 方法4: CloudWatch Logsの利用
【説明】:
  RDS SQL Serverの監査ログやエラーログをCloudWatch Logsに送信し、集中管理する方法です。これにより、RDSインスタンスのディスク容量を消費せず、ログを長期間保存できます。

【メリット】:
  ・RDSインスタンスのディスク容量を圧迫せずに監査ログを保存できる。
  ・AWS CloudWatchの機能を活用して、ログのアラート設定や分析が可能。
  ・AWSインフラ全体の監視や管理と統合しやすく、スケーラブルなログ管理ができる。
【デメリット】:
  ・CloudWatch Logsの使用には保存量に応じた料金が発生する。
  ・CloudWatch Logsを有効にするための設定や、ログフィルタリングの調整が必要。
  ・複数のロググループを管理する場合、整理が複雑になることがある。

