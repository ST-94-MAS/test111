
 
本書の設計範囲
『本書の概要』
オンラインの仕組みとして、通信方式、処理フロー、データ保護方式、負荷分散方式、サービス継続方式、リカバリ方式、接続タイムアウト、Auto Scaling、閉塞/予閉塞、について記述する。

『基本設計書、詳細設計書との関連』
本書に関連する基本設計書、詳細設計書を以下に示す。
・オンライン処理一覧
・システム運転管理方式設計書
・サーバ／コンテナ一覧

『本書の対象範囲』
なお、本書はmdoc IACAシステム内のSMPを対象とし、IA、SP-TSM、及びスマートフォンにて実装される処理は対象外とする。
 

図 1 1 本書の設計範囲
 

オンライン処理方針
オンライン処理方針を以下に記載する。

業務処理に利用する	プログラム言語はJavaを利用する。JDKはAmazon Correttoを利用する。
アプリケーションフレームワークはSpring Bootを利用する。
プログラムコンポーネント間の依存関係を疎結合にすることでプログラムの流用性、メンテナンス性を高める設計を行う。
フレームワーク機能やオープンソースJava APIを多用することで、プログラム開発工数を低減させる。
コンテナを動作させるプラットフォームとしてECS(Amazon Elastic Container Service)を採用する。起動タイプとしては、原則、Fargate(AWS Fargate)を利用し、ミドルウェアやクラスター管理による運用コストを軽減する。但し、Fargateの制限事項及びAWS側の仕様により、実現できない機能やCloudHSMの管理コンソール等はEC2を採用する。また、顔認証機能にて用いる顔照合エンジンはGPUを必要とし、FargateがGPUをサポートしていないため EC2を採用する。
 

オンライン処理方式設計
オンライン処理方式
処理概要
・利用者はスマートフォンから直接、またはAppleサーバを経由しSMPのURLにアクセスする。
・スマートフォンから送信されたHTTPリクエストはInternet GatewayやWAFを経由し、ALBが受信する。
・ALBは、HTTPリクエストを負荷分散対象のECSタスクに割り分ける。またALBにて通信を復号化する。
・暗号化通信で利用するSSL/TLS証明書については、ACM(AWS Certificate Manager)で管理を行い、ALBにて割り当てを行う。
・Appleサーバを経由する場合はサーバ証明書クライアント証明書での相互認証(mTLS)を行いALBにて終端する。
・DB処理は、SQLをDB (Amazon Aurora)へ転送する。
・Amazon AuroraはSQLを処理し、要求元のECSタスクへ処理結果を返却する。
・非同期処理におけるメッセージの受け渡しはAmazon SQSを使用する。
・スマートフォンへの通知はNAT Gatewayを経由する。
 

機能
オンライン処理にて実現する業務/機能については、「オンライン処理一覧（業務設計書）」参照。

通信方式
　オンライン処理を構成する要素間の通信プロトコル／通信モジュールの接続方式を記述する。

表 3 1 通信方式一覧
項番	通信対象	プロトコル	備考
1	マイナポータルアプリ⇔ALB	HTTPS	ALBにて復号化を行う。
2	Appleサーバ⇔ALB	HTTPS(mTLS)	
3	ECSタスク全般⇔Amazon Aurora	JDBC	コネクションプールを利用した通信を行う。
該当するECSタスクは以下になる
アプリ処理受付
Apple処理依頼(SP-Broker)
Apple処理受付(SP-Broker)
Apple処理依頼(SP-Issuer)
Apple処理受付(SP-Issuer)
LCM
業務運用(modc IACA運用者用)
mdoc発行完了再通知
RA処理結果確認
MNカード失効契機対象抽出
誕生日契機対象抽出
mdoc定期更新対象抽出
PASS/mdoc/証明書更新イベント管理
PASS/mdoc/証明書更新リトライイベント管理
SP-TSM処理結果確認
Apple Gateway用統計情報集計
External LCM用統計情報集計
4	ALB⇔APDUコマンド処理結果転送	HTTP	
5	ALB⇔アプリ処理受付	HTTP	
6	ALB⇔Apple処理受付(SP-Broker)	HTTP	
7	ALB⇔Apple処理受付(SP-Issuer)	HTTP	
8	APDUコマンド処理結果転送⇔Amazon SQS	HTTPS	以下のキューにプッシュ
・APDUコマンド結果確認キュー(SMP・SP-TSM間)
9	Amazon SQS⇔APDUコマンド結果確認	HTTPS	以下のキューをプル
・APDUコマンド結果確認キュー(SMP・SP-TSM間)
10	Amazon SQS⇔APDUコマンド転送	HTTPS	以下のキューをプル
・APDUコマンド送信キュー(SMP・SP-TSM間)
11	APDUコマンド転送⇔Network Firewall⇔NAT Gateway⇔Appleサーバ	HTTPS(mTLS)	
12	アプリ処理受付⇔顔認証システム	HTTP	
13	アプリ処理受付⇔VPC Peering⇔開示システム	HTTPS	
14	アプリ処理受付⇔LCM	HTTP	
15	LCM⇔Amazon SQS	HTTPS	以下のキューにプッシュ
・SP-TSM処理依頼キュー(SMP・SP-TSM間)
16	Amazon SQS⇔SMP処理依頼確認	HTTPS	以下のキューをプル
・SP-TSM処理依頼キュー(SMP・SP-TSM間)
17	LCM⇔VPC Peering⇔SMP処理受付	HTTP	
18	LCM⇔Network Firewall⇔NAT Gateway⇔OCSPレスポンダ	HTTP	JPKIシステムのOCSPレスポンダとInternet経由でHTTP通信を行う。
19	LCM⇔Amazon SQS	HTTPS	以下のキューにプッシュ
・mdoc登録/更新/削除/発行依頼キュー(SMP・IA間)
20	Amazon SQS⇔RA	HTTPS	以下のキューをプル
・mdoc登録/更新/削除/発行依頼キュー(SMP・IA間)
21	Amazon SQS⇔RA処理結果確認	HTTPS	以下のキューをプル
・mdoc処理結果キュー(SMP・IA間)
22	Apple処理受付(SP-Broker) ⇔LCM	HTTP	
23	Apple処理受付(SP-Issuer) ⇔LCM	HTTP	
24	申請受付⇔VPC Peerin⇔LCM	HTTP	
25	RA処理結果確認⇔Apple処理依頼(SP-Broker)	HTTP	
26	RA処理結果確認⇔Apple処理依頼(SP-Issuer)	HTTP	
27	RA処理結果確認⇔Amazon SQS	HTTPS	以下のキューにプッシュ
・SP-TSM処理依頼キュー(SMP・SP-TSM間)
28	RA処理結果確認⇔Amazon SQS	HTTPS	以下のキューにプッシュ
・mdoc登録/更新/削除/発行依頼キュー(SMP・IA間)
29	MNカード失効契機対象抽出⇔Amazon SQS	HTTPS	以下のキューにプッシュ
・SP-TSM処理依頼キュー(SMP・SP-TSM間)
30	PASS/mdoc/証明書
更新イベント管理⇔Apple処理依頼(SP-Broker)	HTTP	
31	Apple処理依頼(SP-Broker) ⇔Network Firewall⇔NAT Gateway⇔Appleサーバ	HTTPS(mTLS)	
32	PASS/mdoc/証明書
更新イベント管理⇔Apple処理依頼(SP-Issuer)	HTTP	
33	Apple処理依頼(SP-Issuer) ⇔Network Firewall⇔NAT Gateway⇔Appleサーバ	HTTPS(mTLS)	
34	PASS/mdoc/証明書
更新イベント管理⇔Amazon SQS	HTTPS	以下のキューにプッシュ
・SP-TSM処理依頼キュー(SMP・SP-TSM間)
35	PASS/mdoc/証明書
更新イベント管理⇔Network Firewall⇔NAT Gateway⇔OCSPレスポンダ	HTTP	
36	PASS/mdoc/証明書更新リトライイベント管理⇔Apple処理依頼(SP-Broker) 	HTTP	
37	PASS/mdoc/証明書更新リトライイベント管理⇔Apple処理依頼(SP-Issuer) 	HTTP	
38	SP-TSM処理結果確認
⇔Apple処理依頼(SP-Broker)	HTTP	
39	Apple処理依頼(SP-Broker) ⇔Network Firewall⇔NAT Gateway⇔APNs or CNS(Apple) ⇔マイナポータルアプリ	HTTPS	
40	mdoc発行完了再通知⇔Apple処理依頼(SP-Issuer)	HTTP	
41	Amazon SQS⇔SP-TSM処理結果確認	HTTPS	以下のキューをプル
・SMP処理依頼キュー(SMP・SP-TSM間)
42	保守運用拠点⇔インターネットVPN⇔VPN Gateway⇔NLB⇔業務運用	HTTP	
43	保守運用拠点⇔インターネットVPN⇔VPN Gateway⇔AWSマネジメントコンソール	HTTPS	
	
 

処理フロー

『基本処理フロー』
利用者スマホまたはAppleサーバからのHTTPリクエストよりALBが判断し、ECSタスクに振り分ける。
ALBにアクセスする際の宛先は、パスを指定することによるアクセスを実現する。

1.	ALBからECSタスクに負荷分散を行う。
2.	負荷分散のアルゴリズム等に関しては後述するが、システムが閉塞となっている場合は、2にてすべてのリクエストをHTTPステータスコード：503として返す。
3.	ECSタスクにて処理を行う。
受信したリクエストをもとに、アプリケーションを実行する。アプリケーション
中のDB操作要求は、Amazon Auroraにクエリを送信する。
 

データ保護方式
本システムではデータベースが複数に跨ることはないため、2フェーズコミット等の対処は行わない。
 

負荷分散方式
負荷分散装置による各種設定（振り分けロジックやヘルスチェック方式）の方式を記載する。

『負荷分散方式』
オンライン処理の負荷分散は、Amazon ELB(ALB)で行う。
ALBの設定値を以下に記載する。

『ALB設定項目』
表 3 2 ALBの設定項目
項番	設定項目	設定内容	説明
1	負荷分散アルゴリズム	最小未処理リクエスト	負荷の偏りを防止するため、負荷が一番低いターゲットへロードバランシングを優先する設定とする。
2	セッションアフィニティ	実施しない	本システムでは、オンライン処理に関してのセッション管理は行わない。
3	ヘルスチェック方式	HTTPによるヘルスチェックコンテンツの内容確認	ヘルスチェックコンテンツを解析し、サイトが閉塞中か、そうでないかをチェックする。
4	ヘルスチェックタイムアウト	・応答タイムアウト
・ヘルスチェック間隔	性能要件より、規定の時間内に応答が無い場合は障害と見なし切り離す。
初期設定時、ヘルスチェック間隔やタイムアウト値などはデフォルト値とし、コンテナの起動時間に応じてチューニングを行う。
5	コネクション数の制限	制限しない
	スパイク等が発生し、想定処理量を上回る場合は、エラーレスポンスを返すため、ALBでは制限を行わない。
6	登録解除の遅延	300秒	デフォルト値を設定し、コンテナの処理時間に応じてチューニングを行う。
7	mTLSの設定	・クライアント証明書の処理
・トラストストアの選択	mTLS通信を行う際は相互認証(mTLS)を有効化する。
トラストストアで検証を行いALBでmTLSを終端する。

以下の場合、新規リクエストにエラーレスポンスを返す仕組みとする。

1)	急激なスパイクが発生した場合
急激なスパイクが発生した場合は、クライアント側にエラーレスポンスを返答しエラー画面を表示する方針とする。

サービス継続方式
処理エラー・機器故障が発生した場合の業務サービス継続利用を実現するための方式
を記載する。

1)	ALBの故障が発生した場合(東京リージョンのサービス断)
ALB（ELB）のSLAは99.99%であるが、仕掛中のステートレス・セッションは切断する方式とする。

2)	ECSタスクで故障が発生した場合
マルチAZでのECSのSLAは99.99%である。更にECSタスクはAuto Scalingを形成している。障害発生時、ALBはヘルスチェックにより当該サーバにはリクエストしないこととする。基本的には仕掛中のステートレス・セッションは破棄される。ステートレス・セッション消失後は再度アプリケーションを実行することで、再度業務サービスが利用できるようになる。

3)	EC2インスタンスで故障が発生した場合
単一のEC2インスタンスのSLAは99.5%であるが、マルチAZ 構成でのAuto Scalingを形成し可用性を高める。障害発生時、ALBはヘルスチェックにより当該サーバにはリクエストしないこととする。基本的には仕掛中のステートレス・セッションは破棄される。

4)	Amazon Aurora 片系故障の場合
Aurora DBはリードレプリカが用意されており、コネクションプーリングのヘルスチェックにより障害を検知し、当該サーバにはリクエストしないこととする。仕掛中処理に関しては、ロールバックされる。Aurora DB自体はレプリカがマスターへ昇格する。

5)	Amazon SQS故障の場合
Amazon SQSのSLAは99.9%である。キューからメッセージを取得する処理が失敗した場合は、一定時間経過後(可視性タイムアウト後)に再度、処理可能となる。
正しく処理されないキューのメッセージが残存し続けることを防止するため、当該メッセージはDead Letter Queueに分離される。
	 
 

リカバリ方式
オンライン処理中の故障に対しては、ユーザからの再実行にて対応する。
 

接続タイムアウト設計
ネットワークエラーや接続先サーバの障害等により、不要な接続が残る場合がある。適切なタイムアウト値を設けることで、レスポンスの遅延や不要なリソースの占有等を防止する。

接続タイムアウト設定方針
　 接続タイムアウト時間は、後段(ECSタスク等)より前段（ALB等）が先にタイムアウトすることがないよう、業務アプリケーションの接続タイムアウトの値を考慮の上、設定を行うものとする。 
接続タイムアウトの設定は、ALBやSpring Bootの設定ファイル(application.propertiesなど)で制御する。
ALBタイムアウトはSP-TSMでの試験結果を参考に60秒とし、性能試験実施後に再度検討を行う。

 

Application Auto Scaling設計
利用者の急激なアクセス件数の増加に柔軟に対応するため、本システムではAWSのAuto Scaling機能を利用する。CloudWatchアラームに設定したメトリクス(CPU使用率)に従って、タスク単位でECSタスクを増加、または減少させるか（Auto Scalingポリシーを）指定する。

(1)Auto Scaling対象
		以下のECSタスクをAuto Scaling対象とする。
	APDUコマンド処理結果転送
	アプリ処理受付
	Apple処理依頼(SP-Broker)
	Apple処理受付(SP-Broker)
	Apple処理依頼(SP-Issuer)
	Apple処理受付(SP-Issuer)
	LCM
	APDUコマンド転送
	RA処理結果確認
	SP-TSM処理結果確認
	BAアプリケーション


　(2)Auto Scaling条件（アラームとAuto Scalingポリシー）
Auto Scalingアクションを決めるポリシーとして「ターゲット追跡スケーリング」を採用する。詳細は「性能・拡張性設計書（基本設計書）」「2. 拡張性設計」参照。
2023年2月のSP-TSMでの性能試験を参考にAuto Scalingで使用するメトリクスは、CPU使用率とするが、性能試験実施後に再度検討を行う。なお、CPU使用率の他にリクエスト数によるAuto Scalingも可能だが、リクエストによる処理内容に違いがあるため、CPU使用率が高いにもかかわらずスケールアウトしないことが考えられるため、リクエスト数によるAuto Scalingは不適当となる。
また、スケールアウトの実行タイミングは、増加するリクエストに対し、処理が間に合うようSP-TSMでの試験結果を参考にCPU使用率60%とし、性能試験実施後に再度検討を行う。


(3)Auto Scaling処理方式(アクション)
		Auto Scaling対象となるECSタスクは、ALBとセットで稼働するタイプと、単独で稼働するタイプが存在するが、Auto Scalingの処理方式に違いはないため、以下の説明で使用する図はALBの利用がある場合とする。
『スケールアウトする場合(Fargate)』
		・Amazon CloudWatchにより、メトリクスの条件に合致した状態となったことを検知
・ECRからコンテナイメージをPullし、ECSタスクを追加（迅速に増やす）。
　

 
図 3 1 Auto Scalingによるスケールアウトイメージ(Fargate)

『スケールアウトする場合(ECS on EC2)』
		・Amazon CloudWatchにより、メトリクスの条件に合致した状態となったことを検知
		・AMIの起動テンプレートを使用しEC2インスタンスを追加（迅速に増やす）。
・ECRからコンテナイメージをPullし、EC2上にECSタスクを追加（迅速に増やす）。

 
図 3 2 Auto Scalingによるスケールアウトイメージ(ECS on EC2)

		『スケールインする場合(Fargate)』
・Amazon CloudWatchにより、メトリクスの条件に合致した状態となったことを検知
・ELB(ALB)からリクエストを受け付けている場合、Connection Drainingを有効化しておくことで既存のリクエストが処理されてからECSタスクが削除される
・スラッシングを避ける設定（ゆっくり減らす）とする。

 
図 3 3 Auto Scalingによるスケールインイメージ(Fargate)

		『スケールインする場合(ECS on EC2)』
・Amazon CloudWatchにより、メトリクスの条件に合致した状態となったことを検知
・ELB(ALB)からリクエストを受け付けている場合、Connection Drainingを有効化しておくことで既存のリクエストが処理されてからEC2インスタンスが削除される

 
図 3 4 Auto Scalingによるスケールインイメージ(ECS on EC2)

Amazon SQS設計
　以下の3つのキューについて、下記の設定を行う。
キュー情報
	SP-TSM処理依頼キュー(SMP・SP-TSM間)
	APDUコマンド結果確認キュー(SMP・SP-TSM間)
	mdoc登録/更新/削除/発行依頼キュー(SMP・IA間)

設定
設定項目	内容	備考
種類	FIFOキュー	
処理方式	プル処理を実装	
ポーリング方式	ロング	
暗号化	実施	
想定スループット	Max300件/秒のため標準のスループットとする	
デッドレターキュー	処理が正常に処理できない場合に備え、各キュー用のデッドレターキューを用意する。	

コンテナの起動順序
コンテナの起動順序については、コンテナ間の依存関係があるため、①監視系機能、②DB機能、③運用系機能、④オンライン業務に関する機能(APDUコマンド処理結果転送、アプリ処理受付など)の順序でコンテナを起動していく必要がある。

 
コンテナ設計
全体構成
4章の設計範囲を以下の図に示す。

 
  
図 4 1 第4章の設計範囲（コンテナ設計）

 
ECSクラスター設計
ECSクラスター分割方針
本システムで稼働するアプリケーションタスクの役割ごとにECSクラスターを分割する。
以下に分割したECSクラスターを示す。

表 4 1 ECSクラスター分割方針
項番	種別	クラスター	概要
1	オンライン
	SP-TSM Gateway	AppleサーバとSP-TSM間のAPDUコマンドに関連したコンテナが所属する。
2		SP-Broker	本人確認や失効の依頼受付に関連したコンテナが所属する。
3		SP-Issuer	AppleサーバとIssuing Authorityのインタラクションに関連したコンテナが所属する。
4		External LCM	重複発行チェックや泣き別れチェックといった証明書の状態確認に関連したコンテナが所属する。
5		Biometric Auth	顔認証機能に関連したコンテナが所属する。
6		modc IACA 運用機能群	業務運用(modc IACA運用者用)を行うためのツールを稼働させるコンテナが所属する
7		プロキシ	AWSマネージドコンソールにアクセスするためのプロキシコンテナが所属する。
8	バッチ	SP-TSM Gatewayバッチ	APDUコマンドをAppleサーバに転送する常駐バッチ処理に関連したコンテナが所属する
9		SP-Issuerバッチ	mdoc発行完了の再通知に関連したコンテナが所属する。
10		External LCMバッチ	誕生日契機対象抽出やmdoc定期更新対象抽出など、ライフサイクルのバッチ処理に関連したコンテナが所属する。
11		運用バッチ	統計情報集計など運用のバッチ処理に関連したコンテナが所属する。

Container Insightsの有効化 
本システムではタスクレベルでCPU/メモリを監視するため、ECSクラスター単位でContainer Insightsを有効化する。
詳細については、「システム監視方式設計書（基本設計書）」に示す。

ECSサービス設計
ECSサービス対象
ECSサービスを利用するタスクは、指定した数のタスクを維持する必要があるタスクとする。

起動タイプ
ECSサービスでは、以下の3つの起動タイプを選択することが可能である。
①	Fargate
コンテナが稼働するホストOSの管理・運用が不要となる起動タイプ
②	EC2
コンテナが稼働するホストOSを管理することが可能であり、GPUが必要となるコンテナなど、様々な要件に対応することが可能となる起動タイプ
③	EXTERNAL
AWS以外のオンプレミス環境などのコンテナの維持管理することが可能な起動タイプ

本システムでは、ホストマシンの管理・運用が不要であるFargateタイプを利用する。なお、顔認証機能のみGPUが求められるため	EC2タイプを利用する。

オペレーティングシステムファミリー
Fargateタスクを実行する際のホストOSを以下の2つのタイプから選択可能である。
①	Linux/X86_64、Linux/ARM64
Linuxコンテナを利用する際に選択するタイプ
②	Windows Server 2019 FULL/X86_64、Windows Server 2019 CORE/X86_64
Windows Server 2022 FULL/X86_64、Windows Server 2022 CORE/X86_64 
Windowsコンテナを利用する際に選択するタイプ

本システムでは、Linuxコンテナを利用するため、「Linux/X86_64」タイプを利用する。

EC2上のタスクを実行する際のホストOSを以下の2つのタイプから選択可能である。
③	Linux/X86_64、Linux/ARM64
Linuxコンテナを利用する際に選択するタイプ
④	WINDOWS_SERVER_2022_FULL/X86_64、WINDOWS_SERVER_2022 CORE/X86_64
WINDOWS_SERVER_2019_FULL/X86_64、WINDOWS_SERVER_2019_CORE/X86_64
WINDOWS_SERVER_2016_FULL/X86_64、WINDOWS_SERVER_20H2_CORE/X86_64
Windowsコンテナを利用する際に選択するタイプ

本システムでは、Linuxコンテナを利用するため、「Linux/X86_64」タイプを利用する。

プラットフォームバージョン
本システムで利用するECSサービスのプラットフォームバージョンは、最新バージョンを利用する。
なお、最新バージョンを利用する場合は「LATEST」を指定することも可能である。「LATEST」の場合、タスクのデプロイ時にアップデートが行われ、アプリケーションタスクに不必要な影響を及ぼす可能性がある。よって、本システムでは明示的にバージョンを指定する方針とする。

デプロイメント構成
ECSでは、ローリングアップデート方式及びBlue/Greenデプロイメント方式の2つの方式から選択することが可能である。
詳細については、「リリース管理方式設計書（基本設計書）」に示す。

ネットワーク構成
配置先
ECSサービスを利用するタスクの配置先については「システム全体構成図（基本設計書）」を参照。
パブリックIP
ECSサービスを利用するタスクは、インターネットから直接アクセスされないため、パブリックIPの付与は行わない。

ロードバランサー
リクエストを受け付けるタスクは、ELBを使用し、各タスクにリクエストを分散する。
以下にELBを利用するタスクを示す。

表 4 2 ELBを利用するECSタスク
項番	タスク	ELBの利用	ELBの種類
1	APDUコマンド処理結果転送	〇	ALB
2	アプリ処理受付	〇	ALB
3	Apple処理受付(SP-Broker)	〇	ALB
4	Apple処理受付(SP-Issuer)	〇	ALB
5	Apple処理依頼(SP-Broker)	〇	ALB
6	Apple処理依頼(SP-Issuer)	〇	ALB
7	LCM	〇	ALB
8	業務運用(modc IACA運用者用)	〇	NLB
9	BAアプリケーション	〇	ALB
10	プロキシ	〇	NLB
11	APDUコマンド転送	-	-
12	RA処理結果確認	-	-
13	SP-TSM処理結果確認	-	-

ヘルスチェック猶予期間
タスク内のアプリケーションの起動に時間を要する場合、ALBのヘルスチェックに失敗し、異常と判断されることがある。左記の場合を考慮し、ヘルスチェック猶予期間を設け、タスク内のアプリケーションが起動するまでALBからのヘルスチェックを無視する。
ヘルスチェック猶予期間に設定する値は、デフォルト値である0秒とし、アプリケーションの起動時間に応じてチューニングを行う。
 
ECSタスク設計
本システムで用意するECSタスク/コンテナ
以下に本システムで用意するECSタスク/コンテナを示す。

表 4 3 ECSタスク一覧
項番	種別	タスク/コンテナ名	概要
1	オンライン	APDUコマンド処理結果転送	Appleサーバから送られてきたAPDUコマンド処理結果をSP-TSMに転送するコンテナ
2		アプリ処理受付	IPhoneからmdoc及びPASSに関する申請を受け付けるコンテナ
3		Apple処理依頼(SP-Broker)	AppleサーバへPASSのライフサイクル管理に関する処理の依頼を実施するコンテナ
4		Apple処理受付(SP-Broker)	AppleサーバからPASSのライフサイクル管理に関する処理を受け付けるコンテナ
5		Apple処理依頼(SP-Issuer)	Appleサーバへmdoc発行に関する通知や送信を行うコンテナ
6		Apple処理受付(SP-Issuer)	Appleサーバからmdocのライフサイクル管理に関する処理を受け付けるコンテナ
7		LCM	mdoc・PASSのライフサイクル管理に関する処理を実施するコンテナ
8		業務運用(modc IACA運用者用)	業務運用(modc IACA運用者用)を行うためのツールを稼働させるコンテナ
9		BAアプリケーション	本人確認ソフトウェアを稼働させるコンテナ
10		プロキシ	運用拠点からAWSマネージドコンソールにアクセスするために中継するコンテナ
11	バッチ	APDUコマンド転送	「SP-TSM処理依頼キュー(SMP・SP-TSM間)」からメッセージを取得し、SP-TSMで生成したAPDUコマンドをAppleサーバに転送するコンテナ
12		mdoc発行完了再通知	Appleサーバへmdoc発行完了通知を送信後一定期間内にSP-Issuerにmdoc取得要求が来ない場合、mdoc発行完了の再通知を行うコンテナ
13		RA処理結果確認	「mdoc処理結果キュー(SMP・IA間)」からメッセージを取得し、RAの処理結果確認を実施するコンテナ
14		MNカード失効契機対象抽出	MNカード失効者を対象として抽出し、登録するコンテナ
15		誕生日契機対象抽出	誕生日を迎えた者を対象として抽出し、登録するコンテナ
16		mdoc定期更新対象抽出	30日毎のmdoc自動更新の対象者を抽出し、登録するコンテナ
17		PASS/mdoc/証明書更新イベント管理	登録されたMNカードmdocに関するイベントを実施させるコンテナ
18		PASS/mdoc/証明書更新リトライイベント管理	実施できなかったMNカードmdocに関するイベントをリトライさせるコンテナ
19		SP-TSM処理結果確認	「SMP処理依頼キュー(SMP・SP-TSM間)」からメッセージを取得し、SP-TSMの処理結果確認を実施するコンテナ
20		Apple Gateway用統計情報集計	Apple Gateway管理のテーブル・ログから統計情報の集計を実施するコンテナ
21		External LCM用統計情報集計	External LCM管理のテーブル・ログから統計情報の集計を実施するコンテナ

タスクロール/タスク実行ロール
ECSタスクが他AWSサービスへアクセスする際に「タスクロール」及び「タスク実行ロール」を利用し、権限を割り当てることが可能である。
以下に「タスクロール」及び「タスク実行ロール」の権限割り当て方針を示す。
①	タスクロール
コンテナ内のアプリケーションが他AWSサービスへアクセスする際に利用するロール。アプリケーションが他AWSサービスにアクセスする必要がある場合は、必要最低限の権限を割り当てる。また、他AWSサービスへアクセスする要件が無い場合は、ロールの割り当ては行わない。
②	タスク実行ロール
ECSタスクエージェントがコンテナのダウンロードなどを行う際に利用するロール。全タスクに、以下の権限を付与する。
	ECRからコンテナをPullする権限
	Amazon CloudWatch Logsへのログ転送を行う権限
	AWS Secrets Managerから変数を取得する権限

オペレーティングシステムファミリー
「4.3.3.	オペレーティングシステムファミリー」に記載のオペレーティングシステムファミリーと同様のものを選択することが可能である。ECSサービスとECSタスクに設定するオペレーティングシステムファミリーは統一する必要があるため、「Linux」タイプの「Linux/X86_64」を指定する。

コンテナヘルスチェック
ALBのヘルスチェックとは別に、タスク単体でヘルスチェックを行うことが可能である。
本システムでは、ALBと紐づいていないタスクにはタスク単体のヘルスチェックを利用し、ALBのヘルスチェックを利用しているタスクは、タスク単体のヘルスチェックを利用しない方針とする。
なお、タスク単体のヘルスチェックの値はデフォルト値とし、アプリケーションの特性に応じてチューニングを行う方針とする。

ログ管理
コンテナが出力したログは、awslogsドライバーおよびFirelensを利用しCloudWatch Logsにログを転送する。
詳細は、「ログ管理方式設計書（基本設計書）」に示す。

性能情報管理
サイドカーコンテナとしてOpenTelemetryを使用し、アプリケーションの性能情報を収集し、X-Rayに転送する。

コンテナ分割方針
1つのコンテナに対して1つのアプリケーションを実装することで、スケールアウト/スケールイン及びコンテナの再利用を容易にすることが可能となる。
よって、本システムで利用するコンテナは、1つのアプリケーションに1つのコンテナを用意し、複数のアプリケーションを1つのコンテナに実装しない方針とする。

コンテナリソース設計
CPU/メモリ
各タスクが想定されるトランザクション数を処理出来るようCPU/メモリを割り当てる。
各環境で割り当てるCPU/メモリは、「サーバ／コンテナ一覧（詳細設計書）」に示す。

ストレージ
Fargateタスクは、デフォルトで20GBのストレージが割り当てられる。コンテナ内でログなどのデータを保持しないため、デフォルトの20GBとする。
EC2のストレージは、パナソニックコネクト社製の本人確認ソフトウェアの製品仕様により32GBとする。

タスク間通信方式
各タスク間で通信が発生する場合は、各タスクに紐づくELB経由で通信を行う方針とする。

コンテナ管理設計
可視性設計
ECRでは、一般公開されるパブリックリポジトリと必要な権限を有しているユーザやAWSサービスからのみアクセス可能なプライベートリポジトリの2種類を指定することが可能である。
本システム内で利用するコンテナは、一般に公開することが無いため、プライベートリポジトリを利用する。

タグのイミュータブル設計
同一のタグでコンテナイメージを上書きした場合、障害発生時にソースコードのトレーサビリティを追跡することが困難となる。また、コンテナデプロイ後にエラーが発生した場合、正常なコンテナへのロールバックが困難となるため、同一タグによるコンテナイメージの上書きを禁止する。

コンテナライフサイクル設計
ECRのライフサイクル機能を利用し、保持するコンテナイメージの世代数を管理する。
コンテナイメージの世代数については、「バックアップ処理方式設計書（基本設計書）」に示す。

環境変数管理設計
各タスクが参照する環境変数は、タスク定義、及びAWS Secrets Managerを利用し管理する。
それぞれの利用方針は以下とする。
①	タスク定義更新が無い変数についてはタスク定義に環境変数を定義する。
②	AWS Secrets Manager
Amazon Auroraのユーザ名やパスワードなどのタスク共通及び環境間で異なる値を持つ環境変数を定義する。また、Amazon Auroraのパスワードなどの機密情報はKMSによる暗号化を行う。なお、AWS Secrets Managerのシークレットローテーション機能を用いて、パスワードを自動ローテーションする。
Amazon Auroraへ接続する際は、タスク起動時にAWS Secrets Managerから環境変数を取得し、JDBCで利用可能な状態にする。
AWS Secrets Managerと類似するAWSサービスとしてAWS Systems Manager Parameter Storeが存在するが、環境変数の管理が煩雑となることからAWS Secrets Managerで環境変数を管理する方針とする。

コンテナセキュリティ設計
ECSコンテナセキュリティ設計
	長時間コンテナが稼働することで、コンテナが侵害されるリスクが高まるため、定期的にコンテナを入れ替える方針を検討する。EC2上で稼働するコンテナはコンテナではなくEC2インスタンスを入れ替える方針とする。
	Fargate及びEC2上で稼働するコンテナのルートファイルシステムは、原則、読み取りのみ許可し、マルウェアによる攻撃のリスクを低減する。なお、ログの一時保管などで書き込みが必要な場合は、書き込み可能なディレクトリを限定し、領域を用意する。
	コンテナから外部への通信やコンテナ間通信は、セキュリティグループ及びNetwork  Firewallを利用し通信制御を行う。
	Fargate及びEC2上で稼働するコンテナは、デプロイ前にセキュリティチェックツールのCoverityやSonarQubeを使い、脆弱性診断や不正コードの混入検知を行い、影響のある脆弱性やコードがないもののみ稼働させる方針とする。


ECR設計
	ECRに格納されるコンテナイメージは、ECRのスキャン機能を利用し、脆弱性診断を行う。また、スキャン機能は、OS及びアプリケーションの脆弱性を検知することが可能な拡張スキャンを利用する方針とする。
	ECRに格納されるコンテナイメージは、AWS KMSを利用し暗号化を行う。また、ECRで利用する鍵は、カスタマーキーを利用し暗号化を行う。
 
閉塞/予閉塞処理方式設計
閉塞/予閉塞処理方式設計

（１）	予閉塞が必要となる場合
予閉塞が必要となる場合は以下の通り。詳細は「システム運転管理方式設計書（基本設計書）」参照。
					・システムメンテナンスにより、システムが利用できない場合
					
（２）	予閉塞の処理方式
ALBのリスナールールである固定レスポンスを返す機能により、閉塞時は新規セッションをHTTPステータスコード：503を返す仕組みとする。詳細は「システム運転管理方式設計書（基本設計書）」参照。


