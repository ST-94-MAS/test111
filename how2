

サーバー監査ログを特定のファイルパス（例：D:\rdsdbdata\SQLAudit）に保存することはできる。
テーブルに挿入されたデータ（今回はEmployees_Auditテーブルのデータ）を直接サーバー監査ログファイルに記録することはできない。

監査テーブルの内容をS3に保存する

定期的なエクスポート: Employees_Auditテーブルの内容を定期的にエクスポートし、そのファイルをS3に保存します。
これにより、監査ログの内容をバックアップとして保存することができます。

やりたいこと
SQL Serverの監視ログを取得(S3に)
DBの各テーブルに各ログ(アクセスログ、CREATE,INSERT,DELETE,UPDATE)を取得(S3)

3の手順でEmployeesテーブルに対するINSERT、DELETE、UPDATE操作を監視するコマンドを追記する必要がある？

■手順の流れ
1.SQL に管理者でログイン。
2.サーバー監査ログの作成
3.サーバー監査仕様の作成
4.SQLユーザー登録(20人分)
5.DBの作成(20個)
6.複数のDBに監査設定を付与
7.INSERT、DELETE、UPDATEトリガーをテーブルに作成
8.SQLユーザーとDBユーザーを紐づけ(user5とuserDB5)
9.user5でSQLログイン
10.user5でINSERT、DELETE、UPDATEコマンドを実施。

■実際のスクリプト

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

1.管理者でログイン

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
2.監査の作成
-- masterデータベースに接続
USE [master];
GO

-- サーバー監査の作成（ファイルパスはRDSで自動的に管理されます）
CREATE SERVER AUDIT [ServerAudit]
TO FILE 
(	FILEPATH = N'D:\rdsdbdata\SQLAudit',  -- このパスはRDSのオプショングループ設定に従います
	MAXSIZE = 10 MB,
	RESERVE_DISK_SPACE = OFF
) WITH (ON_FAILURE = CONTINUE);
GO

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
3.サーバー監査仕様の作成
-- サーバー監査仕様の作成
CREATE SERVER AUDIT SPECIFICATION [ServerAuditSpec]
FOR SERVER AUDIT [ServerAudit]
    ADD (LOGIN_CHANGE_PASSWORD_GROUP),           -- パスワード変更の監視
    ADD (FAILED_LOGIN_GROUP),                    -- 失敗したログインの監視
    ADD (SUCCESSFUL_LOGIN_GROUP),                -- 成功したログインの監視
    ADD (DATABASE_OBJECT_ACCESS_GROUP),          -- データベースオブジェクトへのアクセスの監視
    ADD (DATABASE_OBJECT_CHANGE_GROUP),          -- データベースオブジェクトの変更（INSERT, UPDATE, DELETE）の監視
    ADD (DATABASE_PRINCIPAL_CHANGE_GROUP),       -- データベースオブジェクトの作成（CREATE）の監視
    ADD (SCHEMA_OBJECT_CHANGE_GROUP),            -- スキーマオブジェクトの変更（DROPなど）の監視
    ADD (SERVER_STATE_CHANGE_GROUP)             -- サーバーパフォーマンス状態や変更の監視
WITH (STATE = ON);
GO

-- 監査開始 (監査の有効化)
ALTER SERVER AUDIT [ServerAudit]
WITH (STATE = ON);
GO

-- 2. 監査仕様の追加作成
CREATE SERVER AUDIT SPECIFICATION [AuditSpecification]
FOR SERVER AUDIT [ServerAudit]
ADD (INSERT ON OBJECT::dbo.Employees BY dbo),
ADD (DELETE ON OBJECT::dbo.Employees BY dbo),
ADD (UPDATE ON OBJECT::dbo.Employees BY dbo);
GO



▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
4.ユーザー登録
DECLARE @i INT = 1;
WHILE @i <= 20
BEGIN
    DECLARE @dbName NVARCHAR(50) = 'TestDB' + CAST(@i AS NVARCHAR(2));
    DECLARE @sql NVARCHAR(MAX) = 'CREATE DATABASE ' + @dbName;
    EXEC sp_executesql @sql;
    SET @i = @i + 1;
END
GO

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

5.DBの作成

DECLARE @i INT = 1;
WHILE @i <= 20
BEGIN
    -- SQL Serverログインの作成
    DECLARE @loginName NVARCHAR(50) = 'user' + CAST(@i AS NVARCHAR(2));
    DECLARE @password NVARCHAR(50) = 'Password123!';
    DECLARE @sql NVARCHAR(MAX) = 'CREATE LOGIN [' + @loginName + '] WITH PASSWORD = ''' + @password + ''';';
    EXEC sp_executesql @sql;
    
    -- データベース内のユーザー名は "userXXDB" にする
    DECLARE @dbUserName NVARCHAR(50) = @loginName + 'DB';
    DECLARE @dbName NVARCHAR(50) = 'TestDB' + CAST(@i AS NVARCHAR(2));
    
    -- 各データベースにユーザーを作成し、ログインにマッピング
    SET @sql = 'USE ' + @dbName + '; CREATE USER [' + @dbUserName + '] FOR LOGIN [' + @loginName + '];';
    EXEC sp_executesql @sql;
    
    SET @i = @i + 1;
END
GO

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
6.すべてのDBにEmployeesテーブルを作成する
DECLARE @dbName NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

-- データベースカーソルを使用して、すべてのユーザーデータベースに対して操作を実行
DECLARE db_cursor CURSOR FOR
SELECT name 
FROM sys.databases
WHERE name NOT IN ('master', 'model', 'msdb', 'tempdb', 'rdsadmin');  -- システムデータベースを除外

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- 各データベースに対してEmployeesテーブルを作成
    SET @sql = '
    USE [' + @dbName + '];
    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = ''Employees'')
    BEGIN
        CREATE TABLE [dbo].[Employees] (
            EmployeeID INT PRIMARY KEY,
            FirstName NVARCHAR(50),
            LastName NVARCHAR(50),
            HireDate DATE,
            Salary DECIMAL(10, 2)
        );
    END;
    ';
    
    -- 動的SQLを実行
    EXEC sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @dbName;
END;

CLOSE db_cursor;
DEALLOCATE db_cursor;

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
--7.複数のDBに監査設定を付与
--sys.databasesシステムビューを使用して、現在のSQL Serverインスタンス内のすべてのデータベースを取得します。システムデータベース（master、model、msdb、tempdb）は除外します。

DECLARE @dbName NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

-- データベースカーソルを使用して、すべてのユーザーデータベースに対して操作を実行
DECLARE db_cursor CURSOR FOR
SELECT name 
FROM sys.databases
WHERE name NOT IN ('master', 'model', 'msdb', 'tempdb');  -- システムデータベースを除外

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- 各データベースに対して監査設定を動的に実行
    SET @sql = '
    USE [' + @dbName + '];
    IF NOT EXISTS (SELECT * FROM sys.database_audit_specifications WHERE name = ''DatabaseAuditSpec'')
    BEGIN
        CREATE DATABASE AUDIT SPECIFICATION [DatabaseAuditSpec]
        FOR SERVER AUDIT [ServerAudit]
            ADD (DATABASE_CHANGE_GROUP),                
            ADD (DATABASE_OBJECT_ACCESS_GROUP),         
            ADD (DATABASE_OBJECT_CHANGE_GROUP),         
            ADD (DATABASE_PRINCIPAL_CHANGE_GROUP),      
            ADD (FAILED_DATABASE_AUTHENTICATION_GROUP), 
            ADD (BACKUP_RESTORE_GROUP)                  -- バックアップやリストア操作の監視
        WITH (STATE = ON);
    END
    ';

    -- 動的SQLを実行
    EXEC sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @dbName;
END;

CLOSE db_cursor;
DEALLOCATE db_cursor;

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
8.管理権限を付与する
USE [TestDB5];
ALTER ROLE db_owner ADD MEMBER [user5DB];

-- TestDB5 データベースを使用する
USE TestDB5;
GO


-- TestDB5 にテーブルを作成
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

9.INSERT、DELETE、UPDATEトリガーを作成

USE [TestDB14];  -- 特定のデータベース名を入力
-- カーソルを使用せず、特定のデータベースに対して手動でトリガーを作成する

DECLARE @tableName NVARCHAR(128);
DECLARE @innerSql NVARCHAR(MAX);

DECLARE table_cursor CURSOR FOR
SELECT TABLE_NAME 
FROM INFORMATION_SCHEMA.TABLES 
WHERE TABLE_TYPE = 'BASE TABLE' 
AND TABLE_SCHEMA = 'dbo'
AND TABLE_NAME NOT LIKE '%_Audit%';  -- _Auditテーブルを除外

OPEN table_cursor;
FETCH NEXT FROM table_cursor INTO @tableName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- INSERT トリガーの作成
    SET @innerSql = 'CREATE TRIGGER trg_AfterInsert_' + @tableName + '
    ON dbo.' + @tableName + '
    AFTER INSERT
    AS
    BEGIN
        INSERT INTO dbo.Employees_Audit (TableName, AuditAction, EmployeeID, FirstName, LastName, HireDate, Salary, AuditDate)
        SELECT ''' + @tableName + ''', ''INSERT'', EmployeeID, FirstName, LastName, HireDate, Salary, GETDATE()
        FROM inserted;
    END;';
    PRINT @innerSql;
    EXEC sp_executesql @innerSql;

    -- DELETE トリガーの作成
    SET @innerSql = 'CREATE TRIGGER trg_AfterDelete_' + @tableName + '
    ON dbo.' + @tableName + '
    AFTER DELETE
    AS
    BEGIN
        INSERT INTO dbo.Employees_Audit (TableName, AuditAction, EmployeeID, FirstName, LastName, HireDate, Salary, AuditDate)
        SELECT ''' + @tableName + ''', ''DELETE'', EmployeeID, FirstName, LastName, HireDate, Salary, GETDATE()
        FROM deleted;
    END;';
    PRINT @innerSql;
    EXEC sp_executesql @innerSql;

    -- UPDATE トリガーの作成
    SET @innerSql = 'CREATE TRIGGER trg_AfterUpdate_' + @tableName + '
    ON dbo.' + @tableName + '
    AFTER UPDATE
    AS
    BEGIN
        INSERT INTO dbo.Employees_Audit (TableName, AuditAction, EmployeeID, FirstName, LastName, HireDate, Salary, AuditDate)
        SELECT ''' + @tableName + ''', ''UPDATE'', EmployeeID, FirstName, LastName, HireDate, Salary, GETDATE()
        FROM inserted;
    END;';
    PRINT @innerSql;
    EXEC sp_executesql @innerSql;

    FETCH NEXT FROM table_cursor INTO @tableName;
END;

CLOSE table_cursor;
DEALLOCATE table_cursor;
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
--テーブルのログを監査に追加する

-- 監査を設定するデータベースに接続
USE [TestDB14];  -- データベース名を指定
GO

-- 監査仕様を無効化
ALTER DATABASE AUDIT SPECIFICATION [DatabaseAuditSpec] WITH (STATE = OFF);
GO

-- 既存の監査仕様に対する変更（Employees_Audit テーブルの監視を追加）
ALTER DATABASE AUDIT SPECIFICATION [DatabaseAuditSpec]
FOR SERVER AUDIT [ServerAudit]
    ADD (SELECT ON OBJECT::dbo.Employees_Audit BY dbo),   -- Employees_AuditテーブルへのSELECT操作の監視
    ADD (INSERT ON OBJECT::dbo.Employees_Audit BY dbo),   -- Employees_AuditテーブルへのINSERT操作の監視
    ADD (DELETE ON OBJECT::dbo.Employees_Audit BY dbo),   -- Employees_AuditテーブルへのDELETE操作の監視
    ADD (UPDATE ON OBJECT::dbo.Employees_Audit BY dbo);   -- Employees_AuditテーブルへのUPDATE操作の監視
GO

-- 監査仕様を再度有効化
ALTER DATABASE AUDIT SPECIFICATION [DatabaseAuditSpec] WITH (STATE = ON);
GO

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
10.user5でSQLログイン

▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

11.user5でINSERT、DELETE、UPDATEコマンドを実施。

-- TestDB5 データベースを使用する
USE TestDB5;
GO


-- TestDB5 にテーブルを作成
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);

-- INSERT文：Employeesテーブルに5件のデータを挿入
INSERT INTO Employees (EmployeeID, FirstName, LastName, HireDate, Salary)
VALUES 
(1, 'John', 'Doe', '2020-01-15', 55000.00),
(2, 'Jane', 'Smith', '2019-03-23', 60000.00),
(3, 'Michael', 'Johnson', '2021-07-10', 52000.00),
(4, 'Emily', 'Davis', '2018-09-15', 67000.00),
(5, 'Daniel', 'Brown', '2017-05-25', 72000.00);
GO

-- UPDATE文：Salaryを更新
UPDATE Employees
SET Salary = Salary + 5000  -- すべての従業員の給与を5000増加
WHERE HireDate < '2020-01-01';  -- 2020年以前に雇用された従業員が対象
GO

-- DELETE文：特定の従業員を削除
DELETE FROM Employees
WHERE EmployeeID = 5;  -- EmployeeIDが5の従業員を削除
GO
