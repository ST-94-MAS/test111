  */
  /*Ingress Public subnet用ALB*/
    const AlbShareIpublic = new elbv2.ApplicationLoadBalancer(this, "AlbShareIpublic", {
      vpc: props.vpc,
      desyncMitigationMode: elbv2.DesyncMitigationMode.DEFENSIVE,
      http2Enabled: true,
      idleTimeout: cdk.Duration.seconds(60),
      internetFacing: true,
      ipAddressType: elbv2.IpAddressType.IPV4,
      loadBalancerName: `${props.systemPrefix}-${props.envPrefix}-ALB-Share-Ipublic`,
      securityGroup: AlbShareIpublicSg,
      vpcSubnets: props.ingressPublicSubnets,
    });
   /*アクセスログの設定*/
    AlbShareIpublic.logAccessLogs(props.logAlbAccess, `alb/${props.systemPrefix}-${props.envPrefix}-ALB-Share-Ipublic`); /*バケット*/
    cdk.Tags.of(AlbShareIpublic).add(
      "Name", 
      `${props.systemPrefix}-${props.envPrefix}-ALB-Share-Ipublic`
    );

// HTTPSリスナーを直接追加
AlbShareIpublic.addListener("AlbLisIpublicHttps", {
  certificates: [props.asvsmp], // SSL証明書の追加
  defaultAction: elbv2.ListenerAction.forward([props.AlbTgCrestf]),
  open: true,
  port: 443,
  protocol: elbv2.ApplicationProtocol.HTTPS,
}).addTags({
  "Name": `${props.systemPrefix}-${props.envPrefix}-ALB-Lis-Ipublic-Https`
});

// リスナールール 1の追加
new elbv2.ApplicationListenerRule(this, "LisRuleIpublicHttps1c", {
  listener: AlbLisIpublicHttps,
  priority: 10,
  conditions: [elbv2.ListenerCondition.hostHeaders([`***.${props.systemPrefix}-${props.envPrefix}digital.co.jp`])],
  action: elbv2.ListenerAction.forward([props.AlbTgCrestf])
});

// リスナールール 2の追加
new elbv2.ApplicationListenerRule(this, "LisRuleIpublicHttps2c", {
  listener: AlbLisIpublicHttps,
  priority: 20,
  conditions: [elbv2.ListenerCondition.hostHeaders([`***.${props.systemPrefix}-${props.envPrefix}digital.co.jp`])],
  action: elbv2.ListenerAction.forward([props.AlbTgSiarec])
});
