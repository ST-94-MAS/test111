    /*Private Subnet用内部ALB*/
    const AlbSharePrivate = new elbv2.ApplicationLoadBalancer(this, "AlbSharePrivate", {
      vpc: props.vpc,
      desyncMitigationMode: elbv2.DesyncMitigationMode.DEFENSIVE,
      http2Enabled: true,
      idleTimeout: cdk.Duration.seconds(60),
      internetFacing: true,
      ipAddressType: elbv2.IpAddressType.IPV4,
      loadBalancerName: `${props.systemPrefix}-${props.envPrefix}-ALB-Share-Private`,
      securityGroup: AlbSharePrivateSg,
      vpcSubnets: props.privateSubnets,
    });
   /*アクセスログの設定*/
    AlbSharePrivate.logAccessLogs(props.logAlbAccess, `alb/${props.systemPrefix}-${props.envPrefix}-ALB-Share-Private`); /*バケット*/
    cdk.Tags.of(AlbSharePrivate).add(
      "Name", 
      `${props.systemPrefix}-${props.envPrefix}-ALB-Share-Private`
    );

上記コードにaddlistnerを使用してコードを追記して

     /*開発環境Private Subnet用内部ALB Httpsリスナー*/
    const AlbLisSharePrivateHttps = new elbv2.ApplicationListener(this, "AlbLisSharePrivateHttps ", {
      loadBalancer: AlbSharePrivate,
      //certificates: [certificateasvsmp],  // SSL証明書の追加
      defaultAction: elbv2.ListenerAction.forward([AlbTgSiareq]),
      open: true,
      port: 80,
      protocol: elbv2.ApplicationProtocol.HTTP,
    });
    cdk.Tags.of(AlbLisSharePrivateHttps).add("Name",`${props.systemPrefix}-${props.envPrefix}-ALB-Lis-Private-Https`);

      // リスナールールの追加
      // AlbLisSharePrivateHttps.addRules("${props.systemPrefix}${props.envPrefix}LisRulePrivateHttps1c", {
      //   priority: 10,
      //   conditions: [elbv2.ListenerCondition.hostHeaders(['***.${props.systemPrefix}-${props.envPrefix}digital.co.jp'])],  // ホストヘッダーの条件指定
      //   actions: [elbv2.ListenerAction.forward([AlbTgSbarec])] // Smp-Dev-TG-Scareqに転送
      // });
      
    const myLisRulePrivateHttps1c = new elbv2.ApplicationListenerRule(this, "LisRulePrivateHttps1c",{
      listener:  AlbLisSharePrivateHttps,
      priority: 10,
      conditions: [elbv2.ListenerCondition.hostHeaders([`***.${props.systemPrefix}-${props.envPrefix}digital.co.jp`])],  // ホストヘッダーの条件指定
      action: elbv2.ListenerAction.forward([AlbTgSbarec]) // Smp-Dev-TG-Scareqに転送
    });   

      // AlbLisSharePrivateHttps.addRules("${props.systemPrefix}${props.envPrefix}LisRulePrivateHttps2c", {
      //   priority: 20,
      //   conditions: [elbv2.ListenerCondition.hostHeaders(['***.${props.systemPrefix}-${props.envPrefix}digital.co.jp'])],  // ホストヘッダーの条件指定
      //   actions: [elbv2.ListenerAction.forward([AlbTgLcm])] // Smp-Dev-TG-Siareqに転送
      // });
      
    const myLisRulePrivateHttps2c = new elbv2.ApplicationListenerRule(this, "LisRulePrivateHttps2c",{
      listener:  AlbLisSharePrivateHttps,
      priority: 20,
      conditions: [elbv2.ListenerCondition.hostHeaders([`***.${props.systemPrefix}-${props.envPrefix}digital.co.jp`])],  // ホストヘッダーの条件指定
      action: elbv2.ListenerAction.forward([AlbTgLcm]) // Smp-Dev-TG-Siareqに転送
    });   

      // AlbLisSharePrivateHttps.addRules("${props.systemPrefix}${props.envPrefix}LisRulePrivateHttps3c", {
      //   priority: 30,
      //   conditions: [elbv2.ListenerCondition.hostHeaders(['***.${props.systemPrefix}-${props.envPrefix}digital.co.jp'])],  // ホストヘッダーの条件指定
      //   actions: [elbv2.ListenerAction.forward([AlbTgSiareq])] // Smp-Dev-TG-Sbareqに転送
      // });
      
    const myLisRulePrivateHttps3c = new elbv2.ApplicationListenerRule(this, "LisRulePrivateHttps3c",{
      listener:  AlbLisSharePrivateHttps,
      priority: 30,
      conditions: [elbv2.ListenerCondition.hostHeaders([`***.${props.systemPrefix}-${props.envPrefix}digital.co.jp`])],  // ホストヘッダーの条件指定
      action: elbv2.ListenerAction.forward([AlbTgSiareq]) // Smp-Dev-TG-Sbareqに転送
    });   
