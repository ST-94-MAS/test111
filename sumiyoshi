  /*Ingress Public subnet用ALB*/
    const AlbShareIpublic = new elbv2.ApplicationLoadBalancer(this, "AlbShareIpublic", {
      vpc: props.vpc,
      desyncMitigationMode: elbv2.DesyncMitigationMode.DEFENSIVE,
      http2Enabled: true,
      idleTimeout: cdk.Duration.seconds(60),
      internetFacing: true,
      ipAddressType: elbv2.IpAddressType.IPV4,
      loadBalancerName: `${props.systemPrefix}-${props.envPrefix}-ALB-Share-Ipublic`,
      securityGroup: AlbShareIpublicSg,
      vpcSubnets: props.ingressPublicSubnets,
    });
   /*アクセスログの設定*/
    AlbShareIpublic.logAccessLogs(props.logAlbAccess, `alb/${props.systemPrefix}-${props.envPrefix}-ALB-Share-Ipublic`); /*バケット*/
    cdk.Tags.of(AlbShareIpublic).add(
      "Name", 
      `${props.systemPrefix}-${props.envPrefix}-ALB-Share-Ipublic`
    );
    
    // HTTPSリスナーを追加
   const AlbLisIpublicHttps = AlbShareIpublic.addListener("AlbLisIpublicHttps", {
      certificates: [props.asvsmp], // SSL証明書の追加
      defaultAction: elbv2.ListenerAction.forward([props.AlbTgCrestf]),
      open: true,
      port: 443,
      protocol: elbv2.ApplicationProtocol.HTTPS,
    }).addTags({
      "Name": `${props.systemPrefix}-${props.envPrefix}-ALB-Lis-Ipublic-Https`
    });

    // リスナールール 1の追加
    new elbv2.ApplicationListenerRule(this, "LisRuleIpublicHttps1c", {
      listener: AlbLisIpublicHttps,
      priority: 10,
      conditions: [elbv2.ListenerCondition.hostHeaders([`***.${props.systemPrefix}-${props.envPrefix}digital.co.jp`])],
      action: elbv2.ListenerAction.forward([props.AlbTgCrestf])
    });

    // リスナールール 2の追加
    new elbv2.ApplicationListenerRule(this, "LisRuleIpublicHttps2c", {
      listener: AlbLisIpublicHttps,
      priority: 20,
      conditions: [elbv2.ListenerCondition.hostHeaders([`***.${props.systemPrefix}-${props.envPrefix}digital.co.jp`])],
      action: elbv2.ListenerAction.forward([props.AlbTgSiarec])
    });


上記コードにaddlistnerを使用してコードを追記して
     /*開発環境APDUコマンド処理結果転送*/
    const AlbTgCrestf = new elbv2.ApplicationTargetGroup(this, "AlbTgCrestf", {
      vpc: props.vpc,
      targetType: elbv2.TargetType.IP,
      protocol: elbv2.ApplicationProtocol.HTTP,
      port: 8080,
      healthCheck: {
        enabled: true,                        
        interval: cdk.Duration.seconds(30),   
        path: '/actuator/health',             
        port: '8080',                         
        protocol: elbv2.Protocol.HTTP,        
        timeout: cdk.Duration.seconds(5),     
        healthyThresholdCount: 5,             
        unhealthyThresholdCount: 2,           
        healthyHttpCodes: '200'               
      },
      loadBalancingAlgorithmType: elbv2.TargetGroupLoadBalancingAlgorithmType.ROUND_ROBIN,
      targetGroupName: `${props.systemPrefix}-${props.envPrefix}-TG-Crestf`,
    });
    cdk.Tags.of(AlbTgCrestf).add("Name", `${props.systemPrefix}-${props.envPrefix}-TG-Crestf`);
